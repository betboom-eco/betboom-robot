/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common';

export interface NFTPoolInterface extends utils.Interface {
  functions: {
    'BET()': FunctionFragment;
    'LET()': FunctionFragment;
    'USDT()': FunctionFragment;
    'addContractAuth(address)': FunctionFragment;
    'addOrRemoveWhiteList(address[],bool)': FunctionFragment;
    'bonusAccount()': FunctionFragment;
    'buyAndDeposit(bool)': FunctionFragment;
    'buyNum()': FunctionFragment;
    'buyTime(uint256)': FunctionFragment;
    'castNFT()': FunctionFragment;
    'changeTokenID(uint256)': FunctionFragment;
    'checkBuy(address,bool)': FunctionFragment;
    'checkChange(uint256)': FunctionFragment;
    'checkDeposit(address,uint256)': FunctionFragment;
    'claim(uint256)': FunctionFragment;
    'claimNFT(address,uint256)': FunctionFragment;
    'daoAccount()': FunctionFragment;
    'deposit(uint256)': FunctionFragment;
    'depositTime(uint256)': FunctionFragment;
    'erc721()': FunctionFragment;
    'expAddress()': FunctionFragment;
    'gainExperience(address,uint256,uint8)': FunctionFragment;
    'getBlockNum()': FunctionFragment;
    'getBuyNum(address)': FunctionFragment;
    'getBuyTokenID(address,uint256)': FunctionFragment;
    'getCAuthAddress(uint256)': FunctionFragment;
    'getCAuthContanins(address)': FunctionFragment;
    'getCAuthLength()': FunctionFragment;
    'getCurrTime()': FunctionFragment;
    'getIdIsInWhiteList(address)': FunctionFragment;
    'getLid(uint256)': FunctionFragment;
    'getUnLock(uint256)': FunctionFragment;
    'getUnLockTime(uint256)': FunctionFragment;
    'getUserBuyTokenID(address)': FunctionFragment;
    'getWhiteListAddress(uint256)': FunctionFragment;
    'getWhiteListNum()': FunctionFragment;
    'increaseMint(address,uint256,uint256)': FunctionFragment;
    'isOpen()': FunctionFragment;
    'lUnLock(uint256)': FunctionFragment;
    'lockTime()': FunctionFragment;
    'maxSellNum()': FunctionFragment;
    'mintLET(uint256)': FunctionFragment;
    'mintTo(address,uint256)': FunctionFragment;
    'operator()': FunctionFragment;
    'owner()': FunctionFragment;
    'playerNft()': FunctionFragment;
    'removeContractAuth(address)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'sellAmount()': FunctionFragment;
    'sellID()': FunctionFragment;
    'sellIDToTokenID(uint256)': FunctionFragment;
    'setBonusAccount(address)': FunctionFragment;
    'setBuyNum(uint256)': FunctionFragment;
    'setDaoAccount(address)': FunctionFragment;
    'setERC721(address)': FunctionFragment;
    'setExp(address)': FunctionFragment;
    'setIsOpen(bool)': FunctionFragment;
    'setLockTime(uint256)': FunctionFragment;
    'setMaxSellNum(uint256)': FunctionFragment;
    'setOperator(address)': FunctionFragment;
    'setPlayerNFT(address)': FunctionFragment;
    'setSellAmount(uint256)': FunctionFragment;
    'tokenIDToSellID(uint256)': FunctionFragment;
    'tokenIdInfo(uint256)': FunctionFragment;
    'tokenIdToUser(uint256)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'transferTo(address,address,uint256)': FunctionFragment;
    'updatePool(uint256)': FunctionFragment;
    'updateUser(uint256)': FunctionFragment;
    'updateWeek()': FunctionFragment;
    'userInfo(address)': FunctionFragment;
    'userMint(address)': FunctionFragment;
    'userToTokenID(address)': FunctionFragment;
    'withdraw(uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'BET'
      | 'LET'
      | 'USDT'
      | 'addContractAuth'
      | 'addOrRemoveWhiteList'
      | 'bonusAccount'
      | 'buyAndDeposit'
      | 'buyNum'
      | 'buyTime'
      | 'castNFT'
      | 'changeTokenID'
      | 'checkBuy'
      | 'checkChange'
      | 'checkDeposit'
      | 'claim'
      | 'claimNFT'
      | 'daoAccount'
      | 'deposit'
      | 'depositTime'
      | 'erc721'
      | 'expAddress'
      | 'gainExperience'
      | 'getBlockNum'
      | 'getBuyNum'
      | 'getBuyTokenID'
      | 'getCAuthAddress'
      | 'getCAuthContanins'
      | 'getCAuthLength'
      | 'getCurrTime'
      | 'getIdIsInWhiteList'
      | 'getLid'
      | 'getUnLock'
      | 'getUnLockTime'
      | 'getUserBuyTokenID'
      | 'getWhiteListAddress'
      | 'getWhiteListNum'
      | 'increaseMint'
      | 'isOpen'
      | 'lUnLock'
      | 'lockTime'
      | 'maxSellNum'
      | 'mintLET'
      | 'mintTo'
      | 'operator'
      | 'owner'
      | 'playerNft'
      | 'removeContractAuth'
      | 'renounceOwnership'
      | 'sellAmount'
      | 'sellID'
      | 'sellIDToTokenID'
      | 'setBonusAccount'
      | 'setBuyNum'
      | 'setDaoAccount'
      | 'setERC721'
      | 'setExp'
      | 'setIsOpen'
      | 'setLockTime'
      | 'setMaxSellNum'
      | 'setOperator'
      | 'setPlayerNFT'
      | 'setSellAmount'
      | 'tokenIDToSellID'
      | 'tokenIdInfo'
      | 'tokenIdToUser'
      | 'transferOwnership'
      | 'transferTo'
      | 'updatePool'
      | 'updateUser'
      | 'updateWeek'
      | 'userInfo'
      | 'userMint'
      | 'userToTokenID'
      | 'withdraw'
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'BET', values?: undefined): string;
  encodeFunctionData(functionFragment: 'LET', values?: undefined): string;
  encodeFunctionData(functionFragment: 'USDT', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'addContractAuth',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'addOrRemoveWhiteList',
    values: [PromiseOrValue<string>[], PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: 'bonusAccount',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'buyAndDeposit',
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(functionFragment: 'buyNum', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'buyTime',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'castNFT', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'changeTokenID',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'checkBuy',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: 'checkChange',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'checkDeposit',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'claim',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'claimNFT',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'daoAccount',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'depositTime',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'erc721', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'expAddress',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'gainExperience',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'getBlockNum',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getBuyNum',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getBuyTokenID',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getCAuthAddress',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getCAuthContanins',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getCAuthLength',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getCurrTime',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getIdIsInWhiteList',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getLid',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getUnLock',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getUnLockTime',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getUserBuyTokenID',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getWhiteListAddress',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getWhiteListNum',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'increaseMint',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: 'isOpen', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'lUnLock',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'lockTime', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'maxSellNum',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'mintLET',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'mintTo',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'operator', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'playerNft', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'removeContractAuth',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'sellAmount',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'sellID', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'sellIDToTokenID',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setBonusAccount',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setBuyNum',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setDaoAccount',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setERC721',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setExp',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setIsOpen',
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setLockTime',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setMaxSellNum',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setOperator',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setPlayerNFT',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setSellAmount',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'tokenIDToSellID',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'tokenIdInfo',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'tokenIdToUser',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'transferTo',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'updatePool',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateUser',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateWeek',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'userInfo',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'userMint',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'userToTokenID',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: 'BET', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'LET', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'USDT', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'addContractAuth',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'addOrRemoveWhiteList',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'bonusAccount',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'buyAndDeposit',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'buyNum', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'buyTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'castNFT', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'changeTokenID',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'checkBuy', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'checkChange',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'checkDeposit',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'claim', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimNFT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'daoAccount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'depositTime',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'erc721', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'expAddress', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'gainExperience',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getBlockNum',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'getBuyNum', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getBuyTokenID',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getCAuthAddress',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getCAuthContanins',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getCAuthLength',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getCurrTime',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getIdIsInWhiteList',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'getLid', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUnLock', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getUnLockTime',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getUserBuyTokenID',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getWhiteListAddress',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getWhiteListNum',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'increaseMint',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'isOpen', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lUnLock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lockTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxSellNum', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintLET', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintTo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'operator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'playerNft', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'removeContractAuth',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'sellAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sellID', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'sellIDToTokenID',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setBonusAccount',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'setBuyNum', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setDaoAccount',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'setERC721', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setExp', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setIsOpen', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setLockTime',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setMaxSellNum',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setOperator',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setPlayerNFT',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setSellAmount',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'tokenIDToSellID',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'tokenIdInfo',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'tokenIdToUser',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'transferTo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updatePool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateUser', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateWeek', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userMint', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'userToTokenID',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;

  events: {
    'BuyAndDeposit(address,uint256,uint256,bool)': EventFragment;
    'ChangeTokenID(address,uint256,uint256)': EventFragment;
    'ClaimBET(address,uint256,uint256)': EventFragment;
    'ClaimNFT(address,uint256,uint256)': EventFragment;
    'CliamLET(address,uint256,uint256)': EventFragment;
    'Deposit(address,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'TransferTo(address,address,uint256)': EventFragment;
    'Withdraw(address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'BuyAndDeposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ChangeTokenID'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ClaimBET'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ClaimNFT'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CliamLET'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TransferTo'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
}

export interface BuyAndDepositEventObject {
  user: string;
  tokenID: BigNumber;
  amount: BigNumber;
  isBind: boolean;
}
export type BuyAndDepositEvent = TypedEvent<
  [string, BigNumber, BigNumber, boolean],
  BuyAndDepositEventObject
>;

export type BuyAndDepositEventFilter = TypedEventFilter<BuyAndDepositEvent>;

export interface ChangeTokenIDEventObject {
  user: string;
  oldID: BigNumber;
  newID: BigNumber;
}
export type ChangeTokenIDEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ChangeTokenIDEventObject
>;

export type ChangeTokenIDEventFilter = TypedEventFilter<ChangeTokenIDEvent>;

export interface ClaimBETEventObject {
  user: string;
  tokenID: BigNumber;
  userAmount: BigNumber;
}
export type ClaimBETEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ClaimBETEventObject
>;

export type ClaimBETEventFilter = TypedEventFilter<ClaimBETEvent>;

export interface ClaimNFTEventObject {
  user: string;
  tokenID: BigNumber;
  userAmount: BigNumber;
}
export type ClaimNFTEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ClaimNFTEventObject
>;

export type ClaimNFTEventFilter = TypedEventFilter<ClaimNFTEvent>;

export interface CliamLETEventObject {
  user: string;
  tokenID: BigNumber;
  amount: BigNumber;
}
export type CliamLETEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  CliamLETEventObject
>;

export type CliamLETEventFilter = TypedEventFilter<CliamLETEvent>;

export interface DepositEventObject {
  user: string;
  tokenID: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TransferToEventObject {
  token: string;
  account: string;
  amount: BigNumber;
}
export type TransferToEvent = TypedEvent<
  [string, string, BigNumber],
  TransferToEventObject
>;

export type TransferToEventFilter = TypedEventFilter<TransferToEvent>;

export interface WithdrawEventObject {
  user: string;
  tokenID: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface NFTPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NFTPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BET(overrides?: CallOverrides): Promise<[string]>;

    LET(overrides?: CallOverrides): Promise<[string]>;

    USDT(overrides?: CallOverrides): Promise<[string]>;

    addContractAuth(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addOrRemoveWhiteList(
      accounts: PromiseOrValue<string>[],
      isAdd: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bonusAccount(overrides?: CallOverrides): Promise<[string]>;

    buyAndDeposit(
      isBind: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buyNum(overrides?: CallOverrides): Promise<[BigNumber]>;

    buyTime(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    castNFT(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeTokenID(
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    checkBuy(
      user: PromiseOrValue<string>,
      isBind: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    checkChange(
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    checkDeposit(
      user: PromiseOrValue<string>,
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    claim(
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimNFT(
      user: PromiseOrValue<string>,
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    daoAccount(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositTime(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    erc721(overrides?: CallOverrides): Promise<[string]>;

    expAddress(overrides?: CallOverrides): Promise<[string]>;

    gainExperience(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      round: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBlockNum(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBuyNum(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBuyTokenID(
      user: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCAuthAddress(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getCAuthContanins(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getCAuthLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    getIdIsInWhiteList(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getLid(
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { lid: BigNumber }>;

    getUnLock(
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getUnLockTime(
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserBuyTokenID(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getWhiteListAddress(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getWhiteListNum(overrides?: CallOverrides): Promise<[BigNumber]>;

    increaseMint(
      user: PromiseOrValue<string>,
      bAmount: PromiseOrValue<BigNumberish>,
      lAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isOpen(overrides?: CallOverrides): Promise<[boolean]>;

    lUnLock(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { uAmount: BigNumber; nAmount: BigNumber }
    >;

    lockTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxSellNum(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintLET(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintTo(
      account: PromiseOrValue<string>,
      num: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    operator(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    playerNft(overrides?: CallOverrides): Promise<[string]>;

    removeContractAuth(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sellAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    sellID(overrides?: CallOverrides): Promise<[BigNumber]>;

    sellIDToTokenID(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setBonusAccount(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBuyNum(
      num: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDaoAccount(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setERC721(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setExp(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setIsOpen(
      isOpen_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLockTime(
      time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxSellNum(
      num: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOperator(
      operator_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPlayerNFT(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSellAmount(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokenIDToSellID(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenIdInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { lastTime: BigNumber; lastLeaveTime: BigNumber }
    >;

    tokenIdToUser(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferTo(
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePool(
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateUser(
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateWeek(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { letAmount: BigNumber; amount: BigNumber }
    >;

    userMint(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { letAmount: BigNumber; betAmount: BigNumber }
    >;

    userToTokenID(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdraw(
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  BET(overrides?: CallOverrides): Promise<string>;

  LET(overrides?: CallOverrides): Promise<string>;

  USDT(overrides?: CallOverrides): Promise<string>;

  addContractAuth(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addOrRemoveWhiteList(
    accounts: PromiseOrValue<string>[],
    isAdd: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bonusAccount(overrides?: CallOverrides): Promise<string>;

  buyAndDeposit(
    isBind: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buyNum(overrides?: CallOverrides): Promise<BigNumber>;

  buyTime(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  castNFT(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeTokenID(
    tokenID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  checkBuy(
    user: PromiseOrValue<string>,
    isBind: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  checkChange(
    tokenID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  checkDeposit(
    user: PromiseOrValue<string>,
    tokenID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  claim(
    tokenID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimNFT(
    user: PromiseOrValue<string>,
    tokenID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  daoAccount(overrides?: CallOverrides): Promise<string>;

  deposit(
    tokenID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositTime(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  erc721(overrides?: CallOverrides): Promise<string>;

  expAddress(overrides?: CallOverrides): Promise<string>;

  gainExperience(
    user: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    round: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBlockNum(overrides?: CallOverrides): Promise<BigNumber>;

  getBuyNum(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBuyTokenID(
    user: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCAuthAddress(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getCAuthContanins(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getCAuthLength(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrTime(overrides?: CallOverrides): Promise<BigNumber>;

  getIdIsInWhiteList(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getLid(
    tokenID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUnLock(
    tokenID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getUnLockTime(
    tokenID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserBuyTokenID(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getWhiteListAddress(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getWhiteListNum(overrides?: CallOverrides): Promise<BigNumber>;

  increaseMint(
    user: PromiseOrValue<string>,
    bAmount: PromiseOrValue<BigNumberish>,
    lAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isOpen(overrides?: CallOverrides): Promise<boolean>;

  lUnLock(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { uAmount: BigNumber; nAmount: BigNumber }
  >;

  lockTime(overrides?: CallOverrides): Promise<BigNumber>;

  maxSellNum(overrides?: CallOverrides): Promise<BigNumber>;

  mintLET(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintTo(
    account: PromiseOrValue<string>,
    num: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  operator(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  playerNft(overrides?: CallOverrides): Promise<string>;

  removeContractAuth(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sellAmount(overrides?: CallOverrides): Promise<BigNumber>;

  sellID(overrides?: CallOverrides): Promise<BigNumber>;

  sellIDToTokenID(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setBonusAccount(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBuyNum(
    num: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDaoAccount(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setERC721(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setExp(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setIsOpen(
    isOpen_: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLockTime(
    time: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxSellNum(
    num: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOperator(
    operator_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPlayerNFT(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSellAmount(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokenIDToSellID(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenIdInfo(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { lastTime: BigNumber; lastLeaveTime: BigNumber }
  >;

  tokenIdToUser(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferTo(
    token: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePool(
    tokenID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateUser(
    tokenID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateWeek(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userInfo(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { letAmount: BigNumber; amount: BigNumber }
  >;

  userMint(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { letAmount: BigNumber; betAmount: BigNumber }
  >;

  userToTokenID(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdraw(
    tokenID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BET(overrides?: CallOverrides): Promise<string>;

    LET(overrides?: CallOverrides): Promise<string>;

    USDT(overrides?: CallOverrides): Promise<string>;

    addContractAuth(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addOrRemoveWhiteList(
      accounts: PromiseOrValue<string>[],
      isAdd: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    bonusAccount(overrides?: CallOverrides): Promise<string>;

    buyAndDeposit(
      isBind: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    buyNum(overrides?: CallOverrides): Promise<BigNumber>;

    buyTime(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    castNFT(overrides?: CallOverrides): Promise<BigNumber>;

    changeTokenID(
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    checkBuy(
      user: PromiseOrValue<string>,
      isBind: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    checkChange(
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    checkDeposit(
      user: PromiseOrValue<string>,
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    claim(
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimNFT(
      user: PromiseOrValue<string>,
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    daoAccount(overrides?: CallOverrides): Promise<string>;

    deposit(
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositTime(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    erc721(overrides?: CallOverrides): Promise<string>;

    expAddress(overrides?: CallOverrides): Promise<string>;

    gainExperience(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      round: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getBlockNum(overrides?: CallOverrides): Promise<BigNumber>;

    getBuyNum(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBuyTokenID(
      user: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCAuthAddress(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getCAuthContanins(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getCAuthLength(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrTime(overrides?: CallOverrides): Promise<BigNumber>;

    getIdIsInWhiteList(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getLid(
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnLock(
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getUnLockTime(
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserBuyTokenID(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getWhiteListAddress(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getWhiteListNum(overrides?: CallOverrides): Promise<BigNumber>;

    increaseMint(
      user: PromiseOrValue<string>,
      bAmount: PromiseOrValue<BigNumberish>,
      lAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    isOpen(overrides?: CallOverrides): Promise<boolean>;

    lUnLock(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { uAmount: BigNumber; nAmount: BigNumber }
    >;

    lockTime(overrides?: CallOverrides): Promise<BigNumber>;

    maxSellNum(overrides?: CallOverrides): Promise<BigNumber>;

    mintLET(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    mintTo(
      account: PromiseOrValue<string>,
      num: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    operator(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    playerNft(overrides?: CallOverrides): Promise<string>;

    removeContractAuth(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sellAmount(overrides?: CallOverrides): Promise<BigNumber>;

    sellID(overrides?: CallOverrides): Promise<BigNumber>;

    sellIDToTokenID(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setBonusAccount(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBuyNum(
      num: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDaoAccount(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setERC721(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setExp(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setIsOpen(
      isOpen_: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLockTime(
      time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxSellNum(
      num: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOperator(
      operator_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPlayerNFT(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSellAmount(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenIDToSellID(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenIdInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { lastTime: BigNumber; lastLeaveTime: BigNumber }
    >;

    tokenIdToUser(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferTo(
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePool(
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateUser(
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateWeek(overrides?: CallOverrides): Promise<void>;

    userInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { letAmount: BigNumber; amount: BigNumber }
    >;

    userMint(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { letAmount: BigNumber; betAmount: BigNumber }
    >;

    userToTokenID(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    'BuyAndDeposit(address,uint256,uint256,bool)'(
      user?: null,
      tokenID?: null,
      amount?: null,
      isBind?: null
    ): BuyAndDepositEventFilter;
    BuyAndDeposit(
      user?: null,
      tokenID?: null,
      amount?: null,
      isBind?: null
    ): BuyAndDepositEventFilter;

    'ChangeTokenID(address,uint256,uint256)'(
      user?: null,
      oldID?: null,
      newID?: null
    ): ChangeTokenIDEventFilter;
    ChangeTokenID(
      user?: null,
      oldID?: null,
      newID?: null
    ): ChangeTokenIDEventFilter;

    'ClaimBET(address,uint256,uint256)'(
      user?: null,
      tokenID?: null,
      userAmount?: null
    ): ClaimBETEventFilter;
    ClaimBET(
      user?: null,
      tokenID?: null,
      userAmount?: null
    ): ClaimBETEventFilter;

    'ClaimNFT(address,uint256,uint256)'(
      user?: null,
      tokenID?: null,
      userAmount?: null
    ): ClaimNFTEventFilter;
    ClaimNFT(
      user?: null,
      tokenID?: null,
      userAmount?: null
    ): ClaimNFTEventFilter;

    'CliamLET(address,uint256,uint256)'(
      user?: null,
      tokenID?: null,
      amount?: null
    ): CliamLETEventFilter;
    CliamLET(user?: null, tokenID?: null, amount?: null): CliamLETEventFilter;

    'Deposit(address,uint256)'(user?: null, tokenID?: null): DepositEventFilter;
    Deposit(user?: null, tokenID?: null): DepositEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    'TransferTo(address,address,uint256)'(
      token?: null,
      account?: null,
      amount?: null
    ): TransferToEventFilter;
    TransferTo(
      token?: null,
      account?: null,
      amount?: null
    ): TransferToEventFilter;

    'Withdraw(address,uint256)'(
      user?: null,
      tokenID?: null
    ): WithdrawEventFilter;
    Withdraw(user?: null, tokenID?: null): WithdrawEventFilter;
  };

  estimateGas: {
    BET(overrides?: CallOverrides): Promise<BigNumber>;

    LET(overrides?: CallOverrides): Promise<BigNumber>;

    USDT(overrides?: CallOverrides): Promise<BigNumber>;

    addContractAuth(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addOrRemoveWhiteList(
      accounts: PromiseOrValue<string>[],
      isAdd: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bonusAccount(overrides?: CallOverrides): Promise<BigNumber>;

    buyAndDeposit(
      isBind: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buyNum(overrides?: CallOverrides): Promise<BigNumber>;

    buyTime(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    castNFT(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeTokenID(
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    checkBuy(
      user: PromiseOrValue<string>,
      isBind: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkChange(
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkDeposit(
      user: PromiseOrValue<string>,
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimNFT(
      user: PromiseOrValue<string>,
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    daoAccount(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositTime(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    erc721(overrides?: CallOverrides): Promise<BigNumber>;

    expAddress(overrides?: CallOverrides): Promise<BigNumber>;

    gainExperience(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      round: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBlockNum(overrides?: CallOverrides): Promise<BigNumber>;

    getBuyNum(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBuyTokenID(
      user: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCAuthAddress(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCAuthContanins(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCAuthLength(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrTime(overrides?: CallOverrides): Promise<BigNumber>;

    getIdIsInWhiteList(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLid(
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnLock(
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnLockTime(
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserBuyTokenID(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWhiteListAddress(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWhiteListNum(overrides?: CallOverrides): Promise<BigNumber>;

    increaseMint(
      user: PromiseOrValue<string>,
      bAmount: PromiseOrValue<BigNumberish>,
      lAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isOpen(overrides?: CallOverrides): Promise<BigNumber>;

    lUnLock(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockTime(overrides?: CallOverrides): Promise<BigNumber>;

    maxSellNum(overrides?: CallOverrides): Promise<BigNumber>;

    mintLET(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintTo(
      account: PromiseOrValue<string>,
      num: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    operator(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    playerNft(overrides?: CallOverrides): Promise<BigNumber>;

    removeContractAuth(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sellAmount(overrides?: CallOverrides): Promise<BigNumber>;

    sellID(overrides?: CallOverrides): Promise<BigNumber>;

    sellIDToTokenID(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setBonusAccount(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBuyNum(
      num: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDaoAccount(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setERC721(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setExp(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setIsOpen(
      isOpen_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLockTime(
      time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxSellNum(
      num: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOperator(
      operator_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPlayerNFT(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSellAmount(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokenIDToSellID(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenIdInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenIdToUser(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferTo(
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePool(
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateUser(
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateWeek(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userMint(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userToTokenID(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BET(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LET(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    USDT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addContractAuth(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addOrRemoveWhiteList(
      accounts: PromiseOrValue<string>[],
      isAdd: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bonusAccount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyAndDeposit(
      isBind: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buyNum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyTime(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    castNFT(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeTokenID(
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    checkBuy(
      user: PromiseOrValue<string>,
      isBind: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkChange(
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkDeposit(
      user: PromiseOrValue<string>,
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimNFT(
      user: PromiseOrValue<string>,
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    daoAccount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositTime(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    erc721(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    expAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gainExperience(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      round: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBlockNum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBuyNum(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBuyTokenID(
      user: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCAuthAddress(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCAuthContanins(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCAuthLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getIdIsInWhiteList(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLid(
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnLock(
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnLockTime(
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserBuyTokenID(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWhiteListAddress(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWhiteListNum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseMint(
      user: PromiseOrValue<string>,
      bAmount: PromiseOrValue<BigNumberish>,
      lAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isOpen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lUnLock(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxSellNum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintLET(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintTo(
      account: PromiseOrValue<string>,
      num: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    operator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    playerNft(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeContractAuth(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sellAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sellID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sellIDToTokenID(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setBonusAccount(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBuyNum(
      num: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDaoAccount(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setERC721(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setExp(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setIsOpen(
      isOpen_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLockTime(
      time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxSellNum(
      num: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOperator(
      operator_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPlayerNFT(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSellAmount(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokenIDToSellID(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenIdInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenIdToUser(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferTo(
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePool(
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateUser(
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateWeek(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userMint(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userToTokenID(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
